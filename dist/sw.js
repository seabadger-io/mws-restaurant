"use strict";function _newArrowCheck(e,t){if(e!==t)throw new TypeError("Cannot instantiate an arrow function")}var currentCache="mws-static-v1",currentImgCache="mws-images-v1",currentCaches=[currentCache,currentImgCache];self.addEventListener("fetch",function(n){_newArrowCheck(this,this);var e=new URL(n.request.url),t=n.request.clone();-1<["POST","PUT","DELETE"].indexOf(n.request.method.toUpperCase())?n.respondWith(fetch(n.request).then(function(e){return _newArrowCheck(this,this),e.clone().json().then(function(e){var t,n;_newArrowCheck(this,this),"restaurant_id"in e?(t=e.restaurant_id,n="review"):(t=e.id,n="restaurant"),sendCacheNotification({target:n,id:t})}.bind(this)),e}.bind(this)).catch(function(n){return _newArrowCheck(this,this),sendRequestNotification(t),new Promise(function(e,t){_newArrowCheck(this,this),t("API request failed",n)}.bind(this))}.bind(this))):e.pathname.match("^/(restaurants|reviews)")||(e.pathname.match(/\.jpg$/i)?n.respondWith(servePhoto(n.request)):n.respondWith(caches.match(n.request).then(function(e){return _newArrowCheck(this,this),e||fetch(n.request).then(function(t){return _newArrowCheck(this,this),200===t.status?caches.open(currentCache).then(function(e){return _newArrowCheck(this,this),e.put(n.request,t.clone()),t}.bind(this)):t}.bind(this)).catch(function(e){return _newArrowCheck(this,this),new Response("The requested resource is currently not available, please try again later",{status:404,statusText:e.message})}.bind(this))}.bind(this))))}.bind(void 0)),self.addEventListener("install",function(e){_newArrowCheck(this,this);var t=["/","/js/mainbundle.js","/js/detailsbundle.js","/restaurant.html","/index.html","/css/mainstyles.css","/css/detailsstyles.css"];e.waitUntil(caches.open(currentCache).then(function(e){_newArrowCheck(this,this),e.addAll(t)}.bind(this)))}.bind(void 0)),self.addEventListener("activate",function(e){_newArrowCheck(this,this),e.waitUntil(caches.keys().then(function(e){return _newArrowCheck(this,this),Promise.all(e.filter(function(e){return _newArrowCheck(this,this),e.startsWith("mws-")&&-1===currentCaches.indexOf(e)}.bind(this)).map(function(e){return _newArrowCheck(this,this),caches.delete(e)}.bind(this)))}.bind(this)))}.bind(void 0)),self.servePhoto=function(n){_newArrowCheck(this,this);var i=n.url.replace(/\@\d+\.jpg$/,"");return caches.open(currentImgCache).then(function(t){return _newArrowCheck(this,this),t.match(i).then(function(e){return _newArrowCheck(this,this),e||fetch(n).then(function(e){return _newArrowCheck(this,this),t.put(i,e.clone()),e}.bind(this))}.bind(this))}.bind(this))}.bind(void 0),self.sendCacheNotification=function(t){_newArrowCheck(this,this),self.clients.matchAll().then(function(e){_newArrowCheck(this,this),e.forEach(function(e){_newArrowCheck(this,this),e.postMessage({message:"cache_refresh",cacheinfo:t})}.bind(this))}.bind(this))}.bind(void 0),self.sendRequestNotification=function(n){_newArrowCheck(this,this),new Promise(function(t){_newArrowCheck(this,this),n.json().then(function(e){_newArrowCheck(this,this),t({url:n.url,method:n.method,body:e})}.bind(this)).catch(function(){_newArrowCheck(this,this),t({url:n.url,method:n.method})}.bind(this))}.bind(this)).then(function(t){_newArrowCheck(this,this),self.clients.matchAll().then(function(e){_newArrowCheck(this,this),e.forEach(function(e){_newArrowCheck(this,this),e.postMessage({message:"request_failed",request:t})}.bind(this))}.bind(this))}.bind(this))}.bind(void 0);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
