"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _newArrowCheck(e,t){if(e!==t)throw new TypeError("Cannot instantiate an arrow function")}var requestCache;!function(){function s(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function o(n,r,i){var o,e=new Promise(function(e,t){s(o=n[r].apply(n,i)).then(e,t)});return e.request=o,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return o(this[n],e,arguments)})})}function n(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function r(e,r,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[r],(t=o(e,n,arguments)).then(function(e){if(e)return new a(e,t.request)});var e,t})})}function i(e){this._index=e}function a(e,t){this._cursor=e,this._request=t}function c(e){this._store=e}function h(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function u(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new h(n)}function l(e){this._db=e}e(i,"_index",["name","keyPath","multiEntry","unique"]),t(i,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(i,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(a,"_cursor",["direction","key","primaryKey","value"]),t(a,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(a.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),s(t._request).then(function(e){if(e)return new a(e,t._request)})})})}),c.prototype.createIndex=function(){return new i(this._store.createIndex.apply(this._store,arguments))},c.prototype.index=function(){return new i(this._store.index.apply(this._store,arguments))},e(c,"_store",["name","keyPath","indexNames","autoIncrement"]),t(c,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(c,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(c,"_store",IDBObjectStore,["deleteIndex"]),h.prototype.objectStore=function(){return new c(this._tx.objectStore.apply(this._tx,arguments))},e(h,"_tx",["objectStoreNames","mode"]),n(h,"_tx",IDBTransaction,["abort"]),u.prototype.createObjectStore=function(){return new c(this._db.createObjectStore.apply(this._db,arguments))},e(u,"_db",["name","version","objectStoreNames"]),n(u,"_db",IDBDatabase,["deleteObjectStore","close"]),l.prototype.transaction=function(){return new h(this._db.transaction.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(o){[c,i].forEach(function(e){e.prototype[o.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],r=this._store||this._index,i=r[o].apply(r,t.slice(0,-1));i.onsuccess=function(){n(i.result)}}})}),[i,c].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var r=this,i=[];return new Promise(function(t){r.iterateCursor(e,function(e){e?(i.push(e.value),void 0===n||i.length!=n?e.continue():t(i)):t(i)})})})});var d={open:function(e,t,n){var r=o(indexedDB,"open",[e,t]),i=r.request;return i.onupgradeneeded=function(e){n&&n(new u(i.result,e.oldVersion,i.transaction))},r.then(function(e){return new l(e)})},delete:function(e){return o(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=d,module.exports.default=module.exports):self.idb=d}();var retryInProgress=0;"serviceWorker"in navigator&&navigator.serviceWorker.register("/sw.js",{scope:"/"}).then(function(e){_newArrowCheck(this,this),console.log("SW Registration successful. Scope is "+e.scope),requestCache=new ObjectCache("failedRequests",!0),navigator.serviceWorker.addEventListener("message",function(e){_newArrowCheck(this,this),"request_failed"===e.data.message&&(requestCache.put(e.data.request),showToaster("Some of your changes could not be saved","Retry",runRetryRequests),retryIfOnline())}.bind(this)),document.addEventListener("readystatechange",function(){_newArrowCheck(this,this),"complete"===document.readyState&&requestCache.getAll().then(function(e){_newArrowCheck(this,this),e.length&&showToaster("There are unsaved changes","Save",runRetryRequests)}.bind(this))}.bind(this))}.bind(void 0)).catch(function(e){_newArrowCheck(this,this),console.log("SW Registration failed with "+e)}.bind(void 0));var retryIfOnline=function(){_newArrowCheck(this,this),setTimeout(function(){_newArrowCheck(this,this),navigator.onLine?runRetryRequests():retryIfOnline()}.bind(this),2e3)}.bind(void 0),runRetryRequests=function(){_newArrowCheck(this,this),1===++retryInProgress&&(showToaster("Retrying requests, please wait...",null,null),retryRequests().then(function(e){_newArrowCheck(this,this),e?showToaster("Your changes were successfully stored. Reload the page to see the latest changes","Reload",function(){_newArrowCheck(this,this),window.location.reload()}.bind(this)):(showToaster("Some of your changes could not be saved","Retry",runRetryRequests),retryIfOnline()),retryInProgress=0}.bind(this)))}.bind(void 0),showToaster=function(e,t,n){_newArrowCheck(this,this);var r=document.querySelector("#toaster");if(null!==r){r.querySelector("#toaster-message").innerHTML=e;var i=r.querySelector("#toaster-button").querySelector("a");null!==t?(i.innerHTML=t,i.classList.remove("waiting")):(i.innerHTML="Ok",i.classList.add("waiting")),i.onclick=n,r.style.display="flex"}}.bind(void 0),hideToaster=function(){_newArrowCheck(this,this);var e=document.querySelector("#toaster");null!==e&&e.removeAttribute("style")}.bind(void 0),retryRequests=function(){_newArrowCheck(this,this);var n=[];return new Promise(function(t){_newArrowCheck(this,this),requestCache.takeAll().then(function(e){_newArrowCheck(this,this),e.forEach(function(e){_newArrowCheck(this,this);var t=fetch(e.url,{method:e.method,body:e.body?JSON.stringify(e.body):void 0});n.push(t)}.bind(this)),Promise.all(n).then(function(){return _newArrowCheck(this,this),t(!0)}.bind(this)).catch(function(){return _newArrowCheck(this,this),t(!1)}.bind(this))}.bind(this)).catch(function(){return _newArrowCheck(this,this),t(!1)}.bind(this))}.bind(this))}.bind(void 0),LazyLoader=function(){function t(e){if(_classCallCheck(this,t),"IntersectionObserver"in window){this.callback=e,this.observer=new IntersectionObserver(this.onIntersection.bind(this),{root:null,rootMargin:"0px",threshold:.01})}else this.observer=null}return _createClass(t,[{key:"isEnabled",value:function(){return null!==this.observer}},{key:"onIntersection",value:function(e){e.forEach(function(e){_newArrowCheck(this,this),e.isIntersecting&&!1!==this.callback(e.target)&&this.observer.unobserve(e.target)}.bind(this))}},{key:"observeEntry",value:function(e){this.observer.observe(e)}}],[{key:"loadPicture",value:function(e){e.querySelectorAll("source").forEach(function(e){_newArrowCheck(this,this),e.setAttribute("srcset",e.getAttribute("data-srcset"))}.bind(this));var t=e.querySelector("img");return t.setAttribute("src",t.getAttribute("data-src")),!0}}]),t}(),ObjectCache=function(){function n(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1];_classCallCheck(this,n),this.cachename=e,this.openDb(t)}return _createClass(n,[{key:"openDb",value:function(){var t=0<arguments.length&&void 0!==arguments[0]&&arguments[0];this.cache=idb.open(this.cachename,1,function(e){switch(_newArrowCheck(this,this),e.oldVersion){case 0:e.createObjectStore("cache",{keyPath:"id",autoIncrement:t}).createIndex("by-id","id")}}.bind(this))}},{key:"getAll",value:function(){return this.cache.then(function(e){return _newArrowCheck(this,this),e.transaction("cache").objectStore("cache").index("by-id").getAll()}.bind(this))}},{key:"takeAll",value:function(){var r=[];return new Promise(function(n,t){_newArrowCheck(this,this),this.cache.then(function(e){_newArrowCheck(this,this);var t=e.transaction("cache","readwrite");t.objectStore("cache").index("by-id").iterateCursor(function(e){_newArrowCheck(this,this),e&&(r.push(e.value),e.delete(),e.continue())}.bind(this)),t.complete.then(function(){_newArrowCheck(this,this),n(r)}.bind(this))}.bind(this)).catch(function(e){_newArrowCheck(this,this),t(e)}.bind(this))}.bind(this))}},{key:"get",value:function(t){return this.cache.then(function(e){return _newArrowCheck(this,this),e.transaction("cache").objectStore("cache").get(t)}.bind(this))}},{key:"putAll",value:function(n){this.cache.then(function(e){_newArrowCheck(this,this);var t=e.transaction("cache","readwrite").objectStore("cache");n.forEach(function(e){_newArrowCheck(this,this),t.put(e)}.bind(this))}.bind(this))}},{key:"put",value:function(e){this.putAll([e])}},{key:"delete",value:function(t){this.cache.then(function(e){_newArrowCheck(this,this),e.transaction("cache","readwrite").objectStore("cache").delete(t)}.bind(this))}}]),n}();function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _newArrowCheck(e,t){if(e!==t)throw new TypeError("Cannot instantiate an arrow function")}var restaurantsCache=new ObjectCache("restaurants"),reviewsCache=new ObjectCache("reviews");"serviceWorker"in navigator&&navigator.serviceWorker.addEventListener("message",function(e){if(_newArrowCheck(this,this),"cache_refresh"===e.data.message){var t=e.data.cacheinfo;"restaurant"===t.target?(console.log("updating restaurant",t.id),DBHelper.fetchRestaurantById(t.id,function(){_newArrowCheck(this,this)}.bind(this))):(console.log("updating reviews",t.id),DBHelper.fetchReviews(t.id,function(){_newArrowCheck(this,this)}.bind(this)))}}.bind(void 0));var restaurants,neighborhoods,cuisines,map,DBHelper=function(){function n(){_classCallCheck(this,n)}return _createClass(n,null,[{key:"getRestaurants",value:function(t){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:200;restaurantsCache.getAll().then(function(e){_newArrowCheck(this,this),e.length<10?setTimeout(this.getRestaurants(t,2*n),n):t(null,e)}.bind(this)).catch(function(){_newArrowCheck(this,this),this.fetchRestaurants(t)}.bind(this))}},{key:"fetchRestaurants",value:function(t){restaurantsCache.getAll().then(function(e){_newArrowCheck(this,this),10<=e.length&&(t(null,e),t=function(){_newArrowCheck(this,this)}.bind(this)),fetch(this.DATABASE_URL+"/restaurants").then(function(e){_newArrowCheck(this,this),e.json().then(function(e){_newArrowCheck(this,this),t(null,e),restaurantsCache.putAll(e)}.bind(this)).catch(function(e){return _newArrowCheck(this,this),t(e,null)}.bind(this))}.bind(this)).catch(function(e){return _newArrowCheck(this,this),t(e,null)}.bind(this))}.bind(this))}},{key:"fetchReviews",value:function(n,r){reviewsCache.getAll().then(function(e){if(_newArrowCheck(this,this),1<=e.length){var t=e.filter(function(e){return _newArrowCheck(this,this),e.restaurant_id==n}.bind(this));0<t.length&&(r(null,t),r=function(){_newArrowCheck(this,this)}.bind(this))}fetch(this.DATABASE_URL+"/reviews/?restaurant_id="+n).then(function(e){_newArrowCheck(this,this),e.json().then(function(e){_newArrowCheck(this,this),r(null,e),reviewsCache.putAll(e)}.bind(this)).catch(function(e){return _newArrowCheck(this,this),r(e,null)}.bind(this))}.bind(this)).catch(function(e){return _newArrowCheck(this,this),r(e,null)}.bind(this))}.bind(this))}},{key:"fetchRestaurantById",value:function(t,n){var r=!1;restaurantsCache.get(parseInt(t)).then(function(e){_newArrowCheck(this,this),"object"===_typeof(e)&&(r=!0,n(null,e)),r&&(n=function(){_newArrowCheck(this,this)}.bind(this)),fetch(this.DATABASE_URL+"/restaurants/"+t).then(function(e){_newArrowCheck(this,this),200===e.status?e.json().then(function(e){_newArrowCheck(this,this),n(null,e),restaurantsCache.put(e)}.bind(this)).catch(function(e){return _newArrowCheck(this,this),n(e,null)}.bind(this)):404===e.status?n("Restaurant does not exist",null):n(e.statusText,null)}.bind(this)).catch(function(e){return _newArrowCheck(this,this),n(e,null)}.bind(this))}.bind(this))}},{key:"fetchRestaurantByCuisine",value:function(r,i){n.fetchRestaurants(function(e,t){if(_newArrowCheck(this,this),e)i(e,null);else{var n=t.filter(function(e){return _newArrowCheck(this,this),e.cuisine_type==r}.bind(this));i(null,n)}}.bind(this))}},{key:"fetchRestaurantByNeighborhood",value:function(r,i){n.fetchRestaurants(function(e,t){if(_newArrowCheck(this,this),e)i(e,null);else{var n=t.filter(function(e){return _newArrowCheck(this,this),e.neighborhood==r}.bind(this));i(null,n)}}.bind(this))}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(r,i,o){n.fetchRestaurants(function(e,t){if(_newArrowCheck(this,this),e)o(e,null);else{var n=t;"all"!=r&&(n=n.filter(function(e){return _newArrowCheck(this,this),e.cuisine_type==r}.bind(this))),"all"!=i&&(n=n.filter(function(e){return _newArrowCheck(this,this),e.neighborhood==i}.bind(this))),o(null,n)}}.bind(this))}},{key:"fetchNeighborhoods",value:function(i){n.getRestaurants(function(e,n){if(_newArrowCheck(this,this),e)i(e,null);else{var r=n.map(function(e,t){return _newArrowCheck(this,this),n[t].neighborhood}.bind(this)),t=r.filter(function(e,t){return _newArrowCheck(this,this),r.indexOf(e)==t}.bind(this));i(null,t)}}.bind(this))}},{key:"fetchCuisines",value:function(i){n.getRestaurants(function(e,n){if(_newArrowCheck(this,this),e)i(e,null);else{var r=n.map(function(e,t){return _newArrowCheck(this,this),n[t].cuisine_type}.bind(this)),t=r.filter(function(e,t){return _newArrowCheck(this,this),r.indexOf(e)==t}.bind(this));i(null,t)}}.bind(this))}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id=".concat(e.id)}},{key:"imageUrlForRestaurant",value:function(e){return"/img/".concat(e.photograph)}},{key:"mapMarkerForRestaurant",value:function(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:n.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}},{key:"toggleRestaurantFavorite",value:function(e,t){return fetch(n.DATABASE_URL+"/restaurants/".concat(e,"/?is_favorite=").concat(t),{method:"PUT"})}},{key:"addRestaurantReview",value:function(e){return fetch(n.DATABASE_URL+"/reviews/",{method:"POST",body:JSON.stringify(e)})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337"}}]),n}();function _newArrowCheck(e,t){if(e!==t)throw new TypeError("Cannot instantiate an arrow function")}var markers=[];document.onreadystatechange=function(){_newArrowCheck(this,this),"interactive"===document.readyState&&updateRestaurants()}.bind(void 0),document.addEventListener("DOMContentLoaded",function(){_newArrowCheck(this,this),fetchNeighborhoods(),fetchCuisines(),initializeMapToggle(),document.querySelectorAll("#neighborhoods-select,#cuisines-select").forEach(function(e){_newArrowCheck(this,this),e.addEventListener("change",updateRestaurants)}.bind(this))}.bind(void 0));var initializeMapToggle=function(){_newArrowCheck(this,this),document.querySelector("#toggle-map").addEventListener("click",function(e){_newArrowCheck(this,this),e.preventDefault();var t=document.querySelector("#map-container");if("false"===e.target.dataset.show){if(e.target.innerHTML="Hide results map",e.target.dataset.show="true",null===document.querySelector("#mapScript")){var n=document.createElement("script");n.id="mapScript",n.src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCWYfWK4x2AWzzNW1B6YqeMg9JRmBRBygU&libraries=places&callback=initMap",document.querySelector("head").append(n)}0==self.markers.length&&addMarkersToMap()}else e.target.innerHTML="Show results on map",e.target.dataset.show="false";t.classList.toggle("hidden")}.bind(this))}.bind(void 0),fetchNeighborhoods=function(){_newArrowCheck(this,this),DBHelper.fetchNeighborhoods(function(e,t){_newArrowCheck(this,this),e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())}.bind(this))}.bind(void 0),fillNeighborhoodsHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.neighborhoods;_newArrowCheck(this,this);var n=document.getElementById("neighborhoods-select");e.forEach(function(e){_newArrowCheck(this,this);var t=document.createElement("option");t.innerHTML=e,t.value=e,n.append(t)}.bind(this))}.bind(void 0),fetchCuisines=function(){_newArrowCheck(this,this),DBHelper.fetchCuisines(function(e,t){_newArrowCheck(this,this),e?console.error(e):(self.cuisines=t,fillCuisinesHTML())}.bind(this))}.bind(void 0),fillCuisinesHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.cuisines;_newArrowCheck(this,this);var n=document.getElementById("cuisines-select");e.forEach(function(e){_newArrowCheck(this,this);var t=document.createElement("option");t.innerHTML=e,t.value=e,n.append(t)}.bind(this))}.bind(void 0);window.initMap=function(){_newArrowCheck(this,this);self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),self.map.addListener("tilesloaded",setMapTitle),addMarkersToMap()}.bind(void 0);var setMapTitle=function(){_newArrowCheck(this,this),document.querySelector("#map").querySelector("iframe").setAttribute("title","Google maps with restaurant location")}.bind(void 0),updateRestaurants=function(){_newArrowCheck(this,this);var e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,r=t.selectedIndex,i=e[n].value,o=t[r].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(i,o,function(e,t){_newArrowCheck(this,this),e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())}.bind(this))}.bind(void 0),resetRestaurants=function(e){_newArrowCheck(this,this),self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(function(e){return _newArrowCheck(this,this),e.setMap(null)}.bind(this)),self.markers=[],self.restaurants=e}.bind(void 0),setupElementWithLabel=function(e,t,n){_newArrowCheck(this,this);var r=document.createElement("span");r.className="sr-only",r.innerHTML=t,e.append(r);var i=document.createTextNode(n);return e.append(i),e}.bind(void 0),fillRestaurantsHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurants;_newArrowCheck(this,this);var n=document.getElementById("restaurants-list"),r=new LazyLoader(LazyLoader.loadPicture);e.forEach(function(e){_newArrowCheck(this,this);var t=createRestaurantHTML(e);r.isEnabled?r.observeEntry(t):LazyLoader.loadPicture(t),n.append(t)}.bind(this)),addMarkersToMap()}.bind(void 0),createPictureTag=function(e){_newArrowCheck(this,this);var r=DBHelper.imageUrlForRestaurant(e),i=document.createElement("picture");[{media:"(max-width: 400px)",srcset:["@400.jpg 1x",".jpg 2x"]},{media:"(max-width: 549px)",srcset:["@550.jpg 1x",".jpg 2x"]},{media:"(min-width: 550px)",srcset:["@400.jpg 1x",".jpg 2x"]}].forEach(function(e){_newArrowCheck(this,this);var t=document.createElement("data-source");t.setAttribute("media",e.media);var n=[];e.srcset.forEach(function(e){_newArrowCheck(this,this),n.push("".concat(r).concat(e))}.bind(this)),t.setAttribute("srcset",n.join(", ")),i.append(t)}.bind(this));var t=document.createElement("img");return t.setAttribute("data-src","".concat(r,"@550.jpg")),t.setAttribute("alt","Restaurant "+e.name),i.append(t),i}.bind(void 0),createRestaurantHTML=function(e){_newArrowCheck(this,this);var t=document.createElement("li");t.className="restaurant-container";var n=document.createElement("div");n.className="restaurant-img",n.append(createPictureTag(e)),t.append(n);var r=document.createElement("div");r.className="restaurant-summary";var i=document.createElement("h2");i.appendChild(createFavoriteToggle(e));var o=document.createTextNode(e.name);i.appendChild(o),r.append(i);var s=document.createElement("p");s.className="neighborhood pill",r.append(setupElementWithLabel(s,"Neighborhood:",e.neighborhood));var a=document.createElement("p");a.className="address",r.append(setupElementWithLabel(a,"Address:",e.address));var c=document.createElement("a");return c.innerHTML="View Details",c.href=DBHelper.urlForRestaurant(e),c.className="button",c.setAttribute("aria-label","View details of "+e.name),r.append(c),t.append(r),t}.bind(void 0),addMarkersToMap=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurants;_newArrowCheck(this,this),"undefined"!=typeof google&&e.forEach(function(e){_newArrowCheck(this,this);var t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",function(){_newArrowCheck(this,this),window.location.href=t.url}.bind(this)),self.markers.push(t)}.bind(this))}.bind(void 0),createFavoriteToggle=function(e){_newArrowCheck(this,this);var t=document.createElement("a");t.href="#",t.className="favorite-toggle",t.setAttribute("data-restaurant-id",e.id),t.setAttribute("role","switch");var n="true"===e.is_favorite?"true":"false";return t.setAttribute("aria-checked",n),t.setAttribute("title","Toggle favorite status of "+e.name),t.setAttribute("aria-label","Toggle favorite status of "+e.name),t.addEventListener("click",toggleFavoriteHandler),t}.bind(void 0),toggleFavoriteHandler=function(e){_newArrowCheck(this,this);var t=e.currentTarget,n=t.getAttribute("data-restaurant-id"),r="false"===t.getAttribute("aria-checked")?"true":"false";DBHelper.toggleRestaurantFavorite(n,r).then(function(){_newArrowCheck(this,this),t.setAttribute("aria-checked",r)}.bind(this)),e.preventDefault()}.bind(void 0);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
